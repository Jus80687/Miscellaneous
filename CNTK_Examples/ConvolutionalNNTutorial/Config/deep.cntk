deviceId = -1 
command = train:test
precision = "float"
modelPath = "Model/nn_model"


Train = [
    action = "train"
    NDLNetworkBuilder = [
        run = "myndl"
        myndl = [
            ########################################################
            # loading data 
            ########################################################
            features = ImageInput (28, 28, 1, imageLayout = "cudnn")
            featScale = Constant(0.00390625)
            featScaled = Scale(featScale, features)
            labels = Input(10)
            
            ####################################################### 
            # First convolutional layer - 2D convolution
            #######################################################
            kernelWeights1 = LearnableParameter(16, 25, init = "uniform",
                                   initValueScale = 10) 
            kernelBiases1 = ImageParameter(1, 1, 16, init = "fixedValue",
                               value = 1, imageLayout = "cudnn")
            convLinMaps1 = Convolution(kernelWeights1, featScaled, 5, 5, 16, 1, 1,
                                       zeroPadding=true, imageLayout="cudnn")
            plus1 = Plus(convLinMaps1, kernelBiases1)
            convOut1 = RectifiedLinear(plus1) # "rank-3 tensor" [28x28x16]

            ######################################################
            #  First Max Pooling Step
            ######################################################
            # 2x2 pooling window & 2 strides in both width and height direction
            pool1 = MaxPooling(convOut1, 2, 2, 2, 2, imageLayout = "cudnn")
            # results in 14 x 14 x 16 tensor
            
            #####################################################
            # Second convolutional layer - applied over rank-3 tensor
            # Inputs: 16 different 14x14 features from last step,
            # Mapping: 5x5 kernel for each of the 16 14x14 inputs (25*16=400)
            # Output: 32 channels, padding used so result is 14x14x32 tensor
            #####################################################
            kernelWeights2 = LearnableParameter(32, 400, init = "uniform",
                                                initValueScale = 10)
            kernelBiases2 = ImageParameter(1, 1, 32, init = "fixedValue",
                                           value = 1, imageLayout = "cudnn")
            convLinMaps2 = Convolution(kernelWeights2, pool1, {5, 5, 16},
                                       mapCount = 32, stride = {1, 1, 16},
                                       sharing = {true, true, true},
                                       autoPadding = {true, true, false},
                                       lowerPad = 0, upperPad = 0,
                                       imageLayout = "cudnn")
           plus2 = Plus(convLinMaps2, kernelBiases2)
           convOut2 = RectifiedLinear(plus2) # [14x14x32] tensor

           #####################################################
           # Second Max Pooling Step
           # Pools [14x14x32] tensor down to [7x7x32]
           #####################################################
           pool2 = Pooling(convOut2, "max", {2, 2, 1}, stride = {2, 2, 1},
                           autoPadding = {true, true, false},
                           lowerPad = 0, upperPad = 0, imageLayout = "cudnn")
           
          #####################################################
          # Fully Connected hidden layer of 128 hidden nodes from [7x7x32] tensor
          #####################################################
          pool2_to_hidden_weights = ImageParameter(128, 7, 7, 32,
                                                   init = "uniform",
                                                   initValueScale = 1,
                                                   imageLayout = "cudnn")
          pool2_to_hidden_biases = LearnableParameter(128, 1, init = "uniform",
                                                      initValueScale = 1)
          times3 = Times(pool2_to_hidden_weights, pool2)
          plus3 = Plus(times3, pool2_to_hidden_biases)
          hidden1 = Sigmoid(plus3) # 128 x 1

          ####################################################
          # Fully Connected hidden to output layer
          ####################################################
          hidden_to_output_weights = LearnableParameter(10, 128,
                                                        init = "uniform",
                                                        initValueScale = 1)
          hidden_to_output_biases = LearnableParameter(10, 1, init = "uniform",
                                                       initValueScale = 1)
          times4 = Times(hidden_to_output_weights, hidden1)
          z = Plus(times4, hidden_to_output_biases)

            
          CE = CrossEntropyWithSoftmax (labels, z)
          EV = ErrorPrediction(labels, z) 

          FeatureNodes = (features)
          LabelNodes = (labels)
          CriteriaNodes = (CE)
          EvalNodes = (EV)
          OutputNodes = (z)
        ]
    ]
        
    SGD = [
        epochSize = 60000
        minibatchSize = 32
        learningRatesPerMB = 0.1*5:0.3
        momentumPerMB = 0*10:0.7 
        maxEpochs = 15 
    ]
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "Data/Train-28x28_cntk_text.txt"
        input = [
            features = [
                dim = 784
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]
]

Test = [
    action = "test"
    minibatchSize = 16
 
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "Data/Test-28x28_cntk_text.txt"
        input = [
          features = [
            dim = 784
            format = "dense"
          ]
          labels = [
            dim = 10
            format = "dense"
          ]
       ]
    ]
]  
